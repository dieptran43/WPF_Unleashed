<Window x:Class="WPF_Unleashed._4_ProfessionalTools._14_StyleTemplateCoverTheme.Styles"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Styles" Height="500" Width="700">
    <Grid>
        <Grid.Resources>
            <Style x:Key="buttonStyle">
                <Setter Property="Button.FontSize" Value="22"/>
                <Setter Property="Button.Background" Value="Purple"/>
                <Setter Property="Button.Foreground" Value="White"/>
                <Setter Property="Button.Height" Value="50"/>
                <Setter Property="Button.Width" Value="50"/>
                <Setter Property="Button.RenderTransformOrigin" Value=".5,.5"/>
                <Setter Property="Button.RenderTransform">
                    <Setter.Value>
                        <RotateTransform Angle="10"/>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="buttonStyleWithBold" BasedOn="{StaticResource buttonStyle}">
                <!-- Семь свойств, установленных в стиле buttonStyle, наследуются -->
                <Setter Property="Button.FontWeight" Value="Bold"/>
            </Style>
            <Style x:Key="controlStyle">
                <Setter Property="Control.FontSize" Value="22"/>
                <Setter Property="Control.Background" Value="Purple"/>
                <Setter Property="Control.Foreground" Value="White"/>
                <Setter Property="Control.Height" Value="50"/>
                <Setter Property="Control.Width" Value="50"/>
                <Setter Property="TextBox.TextAlignment" Value="Right"/>
                <Setter Property="Control.RenderTransformOrigin" Value=".5,.5"/>
                <Setter Property="Control.RenderTransform">
                    <Setter.Value>
                        <RotateTransform Angle="10"/>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="onlyButtonStyle" TargetType="{x:Type Button}">
                <Setter Property="Button.FontSize" Value="22"/>
                <Setter Property="Button.Background" Value="Purple"/>
                <Setter Property="Button.Foreground" Value="White"/>
                <Setter Property="Button.Height" Value="50"/>
                <Setter Property="Button.Width" Value="50"/>
                <Setter Property="Button.RenderTransformOrigin" Value=".5,.5"/>
                <Setter Property="Button.RenderTransform">
                    <Setter.Value>
                        <RotateTransform Angle="10"/>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="simpleButtonStyle" TargetType="{x:Type Button}">
                <Setter Property="FontSize" Value="22"/>
                <Setter Property="Background" Value="Purple"/>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="Height" Value="50"/>
                <Setter Property="Width" Value="50"/>
                <Setter Property="RenderTransformOrigin" Value=".5,.5"/>
                <Setter Property="RenderTransform">
                    <Setter.Value>
                        <RotateTransform Angle="10"/>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="triggerButtonStyle" TargetType="{x:Type Button}">
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="RenderTransform">
                            <Setter.Value>
                                <RotateTransform Angle="10"/>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="Foreground" Value="Black"/>
                    </Trigger>
                </Style.Triggers>
                <Setter Property="FontSize" Value="22"/>
                <Setter Property="Background" Value="Purple"/>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="Height" Value="50"/>
                <Setter Property="Width" Value="50"/>
                <Setter Property="RenderTransformOrigin" Value=".5,.5"/>
            </Style>
            <Style x:Key="textBoxStyle" TargetType="{x:Type TextBox}">
                <Style.Triggers>
                    <Trigger Property="Validation.HasError" Value="True">
                        <Setter Property="Background" Value="Red"/>
                        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="orStyle" TargetType="{x:Type Button}">
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="RenderTransform">
                            <Setter.Value>
                                <RotateTransform Angle="10"/>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="Foreground" Value="Black"/>
                    </Trigger>
                    <Trigger Property="IsFocused" Value="True">
                        <Setter Property="RenderTransform">
                            <Setter.Value>
                                <RotateTransform Angle="10"/>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="Foreground" Value="Black"/>
                        <Setter Property="FontSize" Value="22"/>
                    </Trigger>
                </Style.Triggers>
                <Setter Property="Background" Value="Purple"/>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="Height" Value="50"/>
                <Setter Property="Width" Value="50"/>
                <Setter Property="RenderTransformOrigin" Value=".5,.5"/>
            </Style>
            <Style x:Key="andStyle" TargetType="{x:Type Button}">
                <Style.Triggers>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsMouseOver" Value="True"/>
                            <Condition Property="IsFocused" Value="True"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="RenderTransform">
                            <Setter.Value>
                                <RotateTransform Angle="10"/>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="Foreground" Value="Black"/>
                    </MultiTrigger>
                </Style.Triggers>
            </Style>
        </Grid.Resources>
        <Button HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top"
                FontSize="22" Background="Purple" Foreground="White" Height="50" Width="50" RenderTransformOrigin=".5,.5">
            <Button.RenderTransform>
                <RotateTransform Angle="10"/>
            </Button.RenderTransform>
            1
        </Button>
        <Button HorizontalAlignment="Left" Margin="60,10,0,0" VerticalAlignment="Top"
                FontSize="22" Background="Purple" Foreground="White" Height="50" Width="50" RenderTransformOrigin=".5,.5">
            <Button.RenderTransform>
                <RotateTransform Angle="10"/>
            </Button.RenderTransform>
            2
        </Button>
        <Button HorizontalAlignment="Left" Margin="110,10,0,0" VerticalAlignment="Top"
                FontSize="22" Background="Purple" Foreground="White" Height="50" Width="50" RenderTransformOrigin=".5,.5">
            <Button.RenderTransform>
                <RotateTransform Angle="10"/>
            </Button.RenderTransform>
            2
        </Button>
        <Button HorizontalAlignment="Left" Margin="10,80,0,0" VerticalAlignment="Top" Style="{StaticResource buttonStyle}">
            1
        </Button>
        <Button HorizontalAlignment="Left" Margin="60,80,0,0" VerticalAlignment="Top" Style="{StaticResource buttonStyle}">
            2
        </Button>
        <Button HorizontalAlignment="Left" Margin="110,80,0,0" VerticalAlignment="Top" Style="{StaticResource buttonStyle}">
            3
        </Button>
        <Button HorizontalAlignment="Left" Margin="10,144,0,0" VerticalAlignment="Top" Style="{StaticResource buttonStyleWithBold}">
            1
        </Button>
        <Button HorizontalAlignment="Left" Margin="60,144,0,0" VerticalAlignment="Top" Style="{StaticResource buttonStyleWithBold}">
            2
        </Button>
        <Button HorizontalAlignment="Left" Margin="110,144,0,0" VerticalAlignment="Top" Style="{StaticResource buttonStyleWithBold}">
            3
        </Button>
        <StackPanel HorizontalAlignment="Left" Height="100" Margin="10,212,0,0" VerticalAlignment="Top" Width="356" Orientation="Horizontal">
            <Button Style="{StaticResource controlStyle}">1</Button>
            <ComboBox Style="{StaticResource controlStyle}">
                <ComboBox.Items>2</ComboBox.Items>
            </ComboBox>
            <Expander Style="{StaticResource controlStyle}" Content="3"/>
            <TabControl Style="{StaticResource controlStyle}">
                <TabControl.Items>4</TabControl.Items>
            </TabControl>
            <ToolBar Style="{StaticResource controlStyle}">
                <ToolBar.Items>5</ToolBar.Items>
            </ToolBar>
            <InkCanvas Style="{StaticResource controlStyle}"/>
            <TextBox Style="{StaticResource controlStyle}" Text="7"/>
        </StackPanel>
        <Button Content="Ok" HorizontalAlignment="Left" Margin="10,329,0,0" VerticalAlignment="Top" Style ="{StaticResource triggerButtonStyle}"/>
        <StackPanel HorizontalAlignment="Left" Height="150" Margin="183,10,0,0" VerticalAlignment="Top" Width="450" Orientation="Horizontal">
            <StackPanel.Resources>
                <Style x:Key="AlternatingRowStyle" TargetType="{x:Type Control}">
                    <Setter Property="Background" Value="Green"/>
                    <Setter Property="Foreground" Value="White"/>
                    <Style.Triggers>
                        <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                            <Setter Property="Background" Value="White"/>
                            <Setter Property="Foreground" Value="Black"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </StackPanel.Resources>
            <ListBox AlternationCount="2" Margin="10" Width="200" ItemContainerStyle="{StaticResource AlternatingRowStyle}">
                <ListBoxItem>Item 1</ListBoxItem>
                <ListBoxItem>Item 2</ListBoxItem>
                <ListBoxItem>Item 3</ListBoxItem>
                <ListBoxItem>Item 4</ListBoxItem>
                <ListBoxItem>Item 5</ListBoxItem>
            </ListBox>
            <TreeView AlternationCount="2" Margin="10" Width="200" ItemContainerStyle="{StaticResource AlternatingRowStyle}">
                <TreeViewItem Header="Root 1" AlternationCount="2" ItemContainerStyle="{StaticResource AlternatingRowStyle}">
                    <TreeViewItem Header="Subitem 1"/>
                    <TreeViewItem Header="Subitem 2"/>
                    <TreeViewItem Header="Subitem 3"/>
                </TreeViewItem>
                <TreeViewItem Header="Root 2" AlternationCount="2" ItemContainerStyle="{StaticResource AlternatingRowStyle}">
                    <TreeViewItem Header="Subitem 1"/>
                    <TreeViewItem Header="Subitem 2"/>
                    <TreeViewItem Header="Subitem 3"/>
                </TreeViewItem>
            </TreeView>
        </StackPanel>
        <StackPanel HorizontalAlignment="Left" Height="30" Margin="371,165,0,0" VerticalAlignment="Top" Width="200">
            <StackPanel.Resources>
                <Style TargetType="{x:Type TextBox}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="disabled">
                            <Setter Property="IsEnabled" Value="False"/>
                        </DataTrigger>
                    </Style.Triggers>
                    <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=Text}"/>
                </Style>
            </StackPanel.Resources>
            <TextBox Margin="3"/>
        </StackPanel>
        <Button Content="Button" HorizontalAlignment="Left" Margin="381,212,0,0" VerticalAlignment="Top" Width="75" Style="{StaticResource orStyle}"/>
        <Button Content="Button" HorizontalAlignment="Left" Margin="381,267,0,0" VerticalAlignment="Top" Width="75" Style="{StaticResource andStyle}"/>
    </Grid>
</Window>
